name: Pull Request

on:
  pull_request:
    types: [ opened, synchronize, reopened, ready_for_review ]
    branches: [ main ]

permissions:
  contents: read
  pull-requests: read

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    name: Detect Workspace Changes
    outputs:
      changed-workspaces: ${{ steps.detect.outputs.changed-workspaces }}
      has-changes: ${{ steps.detect.outputs.has-changes }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect workspace changes
        id: detect
        run: |
          set -euo pipefail

          echo "üîç Detecting workspace changes..."

          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          echo "Base SHA: $BASE_SHA"
          echo "Head SHA: $HEAD_SHA"

          # Ensure base exists locally
          git fetch --no-tags --prune --depth=1 origin "${BASE_SHA}" || true

          # Get all changed files, excluding empty lines
          mapfile -t files < <(git diff --name-only "$BASE_SHA" "$HEAD_SHA" | sed '/^$/d')

          echo "Files changed: ${#files[@]}"

          if [ ${#files[@]} -eq 0 ]; then
            echo "No changes detected"
            echo 'changed-workspaces=[]' >> "$GITHUB_OUTPUT"
            echo 'has-changes=false' >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "Changed files:"
          printf '  %s\n' "${files[@]}"

          # Get actual workspace names from packages directory
          changed_workspaces=()
          for file in "${files[@]}"; do
            # Skip non-workspace files
            if [[ "$file" =~ ^\.github/ ]] || \
               [[ "$file" =~ ^\.vscode/ ]] || \
               [[ "$file" =~ ^docs/ ]] || \
               [[ "$file" =~ ^README ]] || \
               [[ "$file" =~ ^LICENSE ]] || \
               [[ "$file" =~ ^\.(gitignore|env)$ ]] || \
               [[ "$file" == "package.json" ]] || \
               [[ "$file" == "package-lock.json" ]] || \
               [[ "$file" == "yarn.lock" ]]; then
              continue
            fi
          
            # Extract workspace name from packages/* paths
            if [[ "$file" =~ ^packages/([^/]+)/ ]]; then
              workspace="${BASH_REMATCH[1]}"
              if [[ ! " ${changed_workspaces[*]} " =~ " ${workspace} " ]]; then
                changed_workspaces+=("$workspace")
              fi
            fi
          done

          # Convert to JSON array (single line)
          if [ ${#changed_workspaces[@]} -eq 0 ]; then
            echo "No workspace changes detected after filtering"
            echo 'changed-workspaces=[]' >> "$GITHUB_OUTPUT"
            echo 'has-changes=false' >> "$GITHUB_OUTPUT"
          else
            # Create JSON array manually to ensure single line output
            json_array="["
            for i in "${!changed_workspaces[@]}"; do
              if [ $i -gt 0 ]; then
                json_array+=","
              fi
              json_array+="\"${changed_workspaces[i]}\""
            done
            json_array+="]"
          
            echo "Detected workspace changes: ${changed_workspaces[*]}"
            echo "changed-workspaces=${json_array}" >> "$GITHUB_OUTPUT"
            echo 'has-changes=true' >> "$GITHUB_OUTPUT"
          fi

  set-labels:
    runs-on: ubuntu-latest
    name: Set PR Labels
    permissions:
      pull-requests: write
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    steps:
      - name: Todo - implement set-labels
        run: |
          echo "Add labels here (e.g., 'breaking-change', 'feature', etc.)"

  validate-pr:
    runs-on: ubuntu-latest
    name: Validate Pull Request
    steps:
      - name: Todo - implement validation
        run: |
          echo "Add checks here (e.g., title convention, required labels, file ownership, etc.)"
